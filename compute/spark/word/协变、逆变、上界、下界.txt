
//**************  协变、逆变、上界、下界  **************

class Person
class Asia extends Person
class Chinese extends Asia

	//**************  子类可以赋值给父类
val xiaoMing : Chinese = new Chinese
val asia : Asia = xiaoMing

	//**************  T 不变

class Group[T](t : T)

val groupChinese : Group[Chinese] = new Group[Chinese](new Chinese)
val groupAsia : Group[Asia] = groupChinese

    //**************  +T 协变

class Group1[+T](t : T)

val groupChinese : Group1[Chinese] = new Group1[Chinese](new Chinese)
val groupAsia : Group1[Asia] = groupChinese

	//**************  -T 逆变
class Group2[-T](t : T)

val groupAsia : Group2[Asia] = new Group2[Asia](new Asia)
val groupChinese : Group2[Chinese] = groupAsia

	//**************  <: 上界
class Group3[T <: Asia](t : T)

val groupPerson : Group3[Person] = new Group3[Person](new Person)
val groupChinese : Group3[Chinese] = new Group3[Chinese](new Chinese)

    //**************  >: 下界
class Group4[T >: Asia](t : T)

val groupPerson : Group4[Person] = new Group4[Person](new Person)
val groupChinese : Group4[Chinese] = new Group4[Chinese](new Chinese)

   //*************** 方法中的上下界
class Pair[T](val first: T, val second: T) {
    def replaceFirst[R >: T](newFirst : R) = new Pair[R](newFirst, second)
    def replaceSecond[S <: T](newSecond : S) = new Pair[T](first, newSecond)
}

val asiaPair : Pair[Asia] = new Pair[Asia](new Asia, new Asia)
asiaPair.replaceFirst[Person](new Person)
asiaPair.replaceFirst[Chinese](new Chinese)

asiaPair.replaceSecond[Person](new Person)
asiaPair.replaceSecond[Chinese](new Chinese)

	//*************** 协变、逆变中的上下界 【里氏替换原则】
class Group5[+T](t : T){
	def f1[T](t : T) = {}
	def f2[S <: T](s : S) = {}
	def f3[Z >: T](z : Z) = {}
}

class Group6[-T](t : T){
	def f1[T](t : T) = {}
	def f2[S <: T](s : S) = {}
	def f3[Z >: T](z : Z) = {}
}